library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prez.out=substr(speeches, 6, nchar(speeches)-4)
length.speeches=rep(NA, length(speeches))
ff.all<-Corpus(DirSource(folder.path))
ff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
dtm <- DocumentTermMatrix(ff.all,
control = list(weighting =
function(x)
weightTfIdf(x, normalize =
FALSE),
stopwords = TRUE))
ff.dtm=tidy(dtm)
#ff.all<-tm_map(ff.all, stemDocument)
for(i in 1:length(speeches)){
#  #crude=stemDocument(ff.all[[i]])
#  crude=Corpus(VectorSource(ff.all[[i]]))
#  tdm <- TermDocumentMatrix(crude[1], list(wordLengths=c(3, Inf)))
#  m <- as.matrix(tdm)
#  v <- sort(rowSums(m),decreasing=TRUE)
#  d <- data.frame(word = names(v),freq=v)
png(paste("../output/", prez.out[i], ".png", sep=""),
width=300, height=300)
wordcloud(ff.dtm$term[ff.dtm$document==speeches[i]],
ff.dtm$count[ff.dtm$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=prez.out[i])
dev.off()
}
library(tm)
install.packages(tm)
install.packages("tm")
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("tidytext")
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prez.out=substr(speeches, 6, nchar(speeches)-4)
length.speeches=rep(NA, length(speeches))
ff.all<-Corpus(DirSource(folder.path))
ff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
dtm <- DocumentTermMatrix(ff.all,
control = list(weighting =
function(x)
weightTfIdf(x, normalize =
FALSE),
stopwords = TRUE))
ff.dtm=tidy(dtm)
#ff.all<-tm_map(ff.all, stemDocument)
for(i in 1:length(speeches)){
#  #crude=stemDocument(ff.all[[i]])
#  crude=Corpus(VectorSource(ff.all[[i]]))
#  tdm <- TermDocumentMatrix(crude[1], list(wordLengths=c(3, Inf)))
#  m <- as.matrix(tdm)
#  v <- sort(rowSums(m),decreasing=TRUE)
#  d <- data.frame(word = names(v),freq=v)
png(paste("../output/", prez.out[i], ".png", sep=""),
width=300, height=300)
wordcloud(ff.dtm$term[ff.dtm$document==speeches[i]],
ff.dtm$count[ff.dtm$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=prez.out[i])
dev.off()
}
library(dplyr)
library(data.table)
install.packages("data.table")
library(dplyr)
library(data.table)
library(DT)
install.packages("DT")
library(dplyr)
library(data.table)
library(DT)
library(ggplot2)
library(plotly)
install.packages("plotly")
library(dplyr)
library(data.table)
library(DT)
library(ggplot2)
library(plotly)
selected.variables = c("ST", "POBP", "FPOBP", "PWGTP", "NATIVITY")
# "WAOB", "ENG","LANX", "SCHL", "YOEP", "DECADE", "HISP", "LANP", "MIGSP", "NOP", "WGTP", paste0("wgtp", 1:80))
hus.a.data = fread("../data/ss14pusa.csv", select = selected.variables)
countries = fread("../data/countrynames.csv")
db = db %>%
left_join(., countries, by = c("POBP" = "code")) %>%
rename(COB_name = name)
install.packages("corpus.JSS.papers",
+    repos = "http://datacube.wu.ac.at/", type = "source")
install.packages("corpus.JSS.papers", repos = "http://datacube.wu.ac.at/", type = "source")
data("JSS_papers", package = "corpus.JSS.papers")
head(JSS_papers)
dim(JSS_papers)
View(JSS_papers)
View(JSS_papers)
install.packages(""OAIHarvester"")
install.packages("OAIHarvester")
library("OAIHarvester")
x <- oaih_list_records("http://www.jstatsoft.org/oai")
JSS_papers <- oaih_transform(x[, "metadata"])
install.packages("corpus.JSS.papers", repos = "http://datacube.wu.ac.at/", type = "source")
data("JSS_papers", package = "corpus.JSS.papers")
install.packages("corpus.JSS.papers", repos = "http://datacube.wu.ac.at/", type = "source")
data("JSS_papers", package = "corpus.JSS.papers")
head(JSS_papers)
head(JSS_papers)
JSS_papers <- JSS_papers[JSS_papers[,"date"] < "2010-08-05",]
JSS_papers <- JSS_papers[sapply(JSS_papers[, "description"], Encoding) == "unknown",]
names(JSS_papers)
JSS_papers[1,]
typeof(JSS_papers)
summary(JSS_papers)
head(JSS_papers)
View(JSS_papers)
x <- "fa\xE7ile"
Encoding(x)
head(JSS_papers[4])
head(JSS_papers$description)
head(JSS_papers$description)
dim(JSS_papers)
library("tm")
library("XML")
remove_HTML_markup <-
function(s) tryCatch({
doc <- htmlTreeParse(paste("<!DOCTYPE html>", s),
asText = TRUE, trim = FALSE)
xmlValue(xmlRoot(doc))
}, error = function(s) s)
corpus <- Corpus(VectorSource(sapply(JSS_papers[, "description"],
remove_HTML_markup)))
head(corpus)
head(JSS_papers[, "description"])
head(sapply(JSS_papers[, "description"],
remove_HTML_markup))
R> Sys.setlocale("LC_COLLATE", "C")
Sys.setlocale("LC_COLLATE", "C")
JSS_dtm <- DocumentTermMatrix(corpus,
control = list(stemming = TRUE, stopwords = TRUE, minWordLength = 3,
removeNumbers = TRUE, removePunctuation = TRUE))
dim(JSS_dtm)
head(corpus)
corpus
dim(JSS_papers)
JSS_papers[, "description"]
VectorSource(sapply(JSS_papers[, "description"],
remove_HTML_markup))
corpus <- Corpus(VectorSource(sapply(JSS_papers[, "description"],
dim(JSS_dtm)
f
dim(JSS_dtm)
install.packages("slam")
install.packages("slam")
library(slam)
summary(col_sums(JSS_dtm))
JSS_dtm
dim(JSS_dtm)
JSS_dtm
col_sums(JSS_dtm)
colnames(JSS_dtm)
rownames(JSS_dtm)
dim(sapply(JSS_papers[, "description"],
remove_HTML_markup))
length(sapply(JSS_papers[, "description"],
remove_HTML_markup))
JSS_dtm$nrow
JSS_dtm$i
JSS_dtm$j
JSS_dtm$v
row_sums(JSS_dtm)
JSS_dtm[1,]
JSS_dtm[2,]
term_tfidf <-
tapply(JSS_dtm$v/row_sums(JSS_dtm)[JSS_dtm$i], JSS_dtm$j, mean) *
log2(nDocs(JSS_dtm)/col_sums(JSS_dtm > 0))
summary(term_tfidf)
head(dtm)
dtm
freq <- colSums(as.matrix(dtm))
length(freq)
freq
as.matrix(dtm)
dim(as.matrix(dtm))
names(freq[freq >= 30])
ord <- order(freq, decreasing = T)
head(freq[ord])
---
title: "tm example"
author: "Zijun Nie ; zn2146"
date: "January 21, 2017"
output: html_document
---
```{r setup, include=FALSE}
install.packages("corpus.JSS.papers", repos = "http://datacube.wu.ac.at/", type = "source")
data("JSS_papers", package = "corpus.JSS.papers")
head(JSS_papers)
JSS_papers <- JSS_papers[JSS_papers[,"date"] < "2010-08-05",]
JSS_papers <- JSS_papers[sapply(JSS_papers[, "description"], Encoding) == "unknown",]
dim(JSS_papers)
library("tm")
library("XML")
remove_HTML_markup <-
function(s) tryCatch({
doc <- htmlTreeParse(paste("<!DOCTYPE html>", s),
asText = TRUE, trim = FALSE)
xmlValue(xmlRoot(doc))
}, error = function(s) s)
corpus <- Corpus(VectorSource(sapply(JSS_papers[, "description"],
remove_HTML_markup)))
Sys.setlocale("LC_COLLATE", "C")
JSS_dtm <- DocumentTermMatrix(corpus,
control = list(stemming = TRUE, stopwords = TRUE, minWordLength = 3,
removeNumbers = TRUE, removePunctuation = TRUE))
dim(JSS_dtm)
install.packages("slam")
library(slam)
summary(col_sums(JSS_dtm))
term_tfidf <-
tapply(JSS_dtm$v/row_sums(JSS_dtm)[JSS_dtm$i], JSS_dtm$j, mean) *
log2(nDocs(JSS_dtm)/col_sums(JSS_dtm > 0))
summary(term_tfidf)
```
```{r}
freq <- colSums(as.matrix(dtm))
length(freq)
names(freq[freq >= 30])
findFreqTerms(dtm, lowfreq = 30)
ord <- order(freq, decreasing = T)
head(freq[ord])
tail(freq[ord])
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
tail(freq[ord])
corr <- cor(as.matrix(dtm))
dim(corr)
head(corr)
corr <- cor(as.matrix(dtm))
head(corr)
corr[1:5, 1:5]
op <- options()
options(digits = 2)
(names(corr[,"oil"] > 0.8),"oil")
name <- setdiff(names(corr[,"oil"]corr[,"oil"] > 0.8),"oil")
name <- setdiff(names(corr[,"oil"]corr[,"oil"] > 0.8),"oil")
name <- setdiff(names(corr[,"oil"] > 0.8),"oil")
head(col_names(corr))
head(colnames(corr))
name <- setdiff(names(corr[,"14th"] > 0.8),"14th")
value <- corr[name, "14th"]
matrix <- matrix(value[order(value, decreasing = T)])
rownames(matrix) <- names(value)
colnames(matrix) <- "14th"
matrix
name <- setdiff(names(corr[,"14th"]corr[,"14th"] > 0.8),"14th")
name <- setdiff(names(corr[,"14th"] corr[,"14th"] > 0.8),"14th")
head(corr[,"14th"])
value
max(corr[,"14th"])
min(corr[,"14th"])
corr[,"14th"] > 0.8
name <- names(corr[,"14th"] > 0.8)
name
head(name)
corr[,"14th"]
name <- names((corr[,"14th"]) > 0.8)
head(name)
head(corr[,"14th"])
head(names(corr[,"14th"]))
corr[1,"14th"]
corr[1,"14th"]>0.8
names(corr[c(1,4),"14th"]>0.8)
name <- setdiff(names(corr[,"14th"][corr[,"14th"] > 0.8),"14th")
name <- setdiff(names(corr[,"14th"][corr[,"14th"]] > 0.8),"14th")
name <- setdiff(names(corr[,"14th"][corr[,"14th"] > 0.8]),"14th")
op <- options()
options(digits = 2)
name <- setdiff(names(corr[,"14th"][corr[,"14th"] > 0.8]),"14th")
value <- corr[name, "14th"]
matrix <- matrix(value[order(value, decreasing = T)])
rownames(matrix) <- names(value)
colnames(matrix) <- "14th"
matrix
findAssocs(dtm, "14th", 0.8)
matrix
Sparse <- length(which(matrix(dtm) == 0))
Sparse
matrix(dtm) == 0
matrix(dtm)
dim(matrix(dtm))
reterm <- removeSparseTerms(dtm, 0.4)
inspect(reterm)
install.packages("Rgraphviz")
require("Rgraphviz")
plot(dtm, terms = findFreqTerms(dtm, lowfreq = 20))
install.packages('Rgraphviz')
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
